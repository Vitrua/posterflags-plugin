#nullable enable
// <auto-generated/>
//------------------------------------------------------------------------------
// LibraryScanController.cs
// Copyright (c) YourCompany. All rights reserved.
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
//------------------------------------------------------------------------------


namespace Jellyfin.Plugin.PosterFlags.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using MediaBrowser.Controller.Entities;
    using MediaBrowser.Controller.Library;
    using MediaBrowser.Model.Entities;
    using MediaBrowser.Model.IO;
    using MediaBrowser.Model.Querying;
    using Microsoft.AspNetCore.Mvc;
    using Jellyfin.Data.Enums;

    /// <summary>
    /// API Controller to handle scanning movies and TV shows.
    /// </summary>
    [ApiController]
    [Route("PosterFlags/ScanLibrary")]
    public class LibraryScanController : ControllerBase
    {
        private readonly ILibraryManager libraryManager;
        private readonly HashSet<string> scannedItems = new();

        /// <summary>
        /// Initializes a new instance of the <see cref="LibraryScanController"/> class.
        /// </summary>
        public LibraryScanController(ILibraryManager libraryManager)
        {
            this.libraryManager = libraryManager;
        }

        /// <summary>
        /// Scans the library for movies and TV show episodes and returns their titles along with audio track names.
        /// </summary>
        /// <returns>A list of titles and their audio tracks.</returns>
        [HttpGet]
        public ActionResult<List<string>> ScanLibrary()
        {
            var results = new List<string>();

            var items = libraryManager.GetItemList(new InternalItemsQuery
            {
                IncludeItemTypes = new[] { BaseItemKind.Movie, BaseItemKind.Episode },
            });

            foreach (var item in items)
            {
                // Add returns false if already in set
                if (this.scannedItems.Add(item.Id.ToString())) 
                {
                    var title = item.Name;
                    var audioTracks = new List<string>();

                    // Get media sources (files)
                    var mediaSources = item.GetMediaSources(false);

                    foreach (var mediaSource in mediaSources)
                    {
                        foreach (var stream in mediaSource.MediaStreams)
                        {
                            if (stream.Type == MediaStreamType.Audio)
                            {
                                audioTracks.Add(stream.DisplayTitle ?? "Unknown Audio Track");
                            }
                        }
                    }

                    var audioInfo = audioTracks.Any() ? string.Join(", ", audioTracks) : "No Audio Tracks Found";
                    results.Add($"{title} - Audio Tracks: {audioInfo}");
                }
            }

            return Ok(results);
        }
    }
}
